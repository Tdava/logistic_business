import React, { useState } from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import './Calculator.scss';

interface CalculatorValues {
  fromCity: string;
  toCity: string;
  weight: number;
  volume: number;
  goodsType: string;
  deliveryType: 'sea' | 'rail' | 'air';
}

const Calculator: React.FC = () => {
  const [showResult, setShowResult] = useState(false);
  const [estimatedPrice, setEstimatedPrice] = useState<number>(0);

  const validationSchema = Yup.object({
    fromCity: Yup.string().required('–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
    toCity: Yup.string().required('–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'),
    weight: Yup.number()
      .required('–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞')
      .positive('–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è'),
    volume: Yup.number()
      .required('–£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º –≥—Ä—É–∑–∞')
      .positive('–û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è'),
    goodsType: Yup.string().required('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞'),
    deliveryType: Yup.string().required('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏')
  });

  const deliveryTypes = [
    { value: 'sea', label: '–ú–æ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', icon: 'üö¢', description: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π' },
    { value: 'rail', label: '–ñ/–î –¥–æ—Å—Ç–∞–≤–∫–∞', icon: 'üöÇ', description: '–ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏' },
    { value: 'air', label: '–ê–≤–∏–∞ –¥–æ—Å—Ç–∞–≤–∫–∞', icon: '‚úàÔ∏è', description: '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–∞–∂–Ω—ã—Ö –≥—Ä—É–∑–æ–≤' }
  ];

  const goodsTypes = [
    '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
    '–û–¥–µ–∂–¥–∞ –∏ —Ç–µ–∫—Å—Ç–∏–ª—å',
    '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    '–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏',
    '–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
    '–î—Ä—É–≥–æ–µ'
  ];

  const calculatePrice = (values: CalculatorValues): number => {
    const basePrice = values.weight * 100 + values.volume * 1000;
    const multiplier = {
      sea: 1,
      rail: 1.5,
      air: 3
    }[values.deliveryType];
    
    return Math.round(basePrice * multiplier);
  };

  const handleSubmit = (values: CalculatorValues) => {
    const price = calculatePrice(values);
    setEstimatedPrice(price);
    setShowResult(true);
  };

  return (
    <section className="calculator" id="calculator">
      <div className="container">
        <h2>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏</h2>
        <div className="calculator-content">
          <Formik
            initialValues={{
              fromCity: '',
              toCity: '',
              weight: 0,
              volume: 0,
              goodsType: '',
              deliveryType: 'sea'
            }}
            validationSchema={validationSchema}
            onSubmit={handleSubmit}
          >
            {({ values, setFieldValue }) => (
              <Form className="calculator-form">
                <div className="delivery-types">
                  <p className="section-label">–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏</p>
                  <div className="delivery-options">
                    {deliveryTypes.map((type) => (
                      <div
                        key={type.value}
                        className={`delivery-option ${values.deliveryType === type.value ? 'active' : ''}`}
                        onClick={() => setFieldValue('deliveryType', type.value)}
                      >
                        <span className="icon">{type.icon}</span>
                        <div className="option-content">
                          <span className="label">{type.label}</span>
                          <span className="description">{type.description}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="form-grid">
                  <div className="form-group">
                    <label htmlFor="fromCity">–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</label>
                    <Field
                      type="text"
                      id="fromCity"
                      name="fromCity"
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ì—É–∞–Ω—á–∂–æ—É"
                    />
                    <ErrorMessage name="fromCity" component="div" className="error" />
                  </div>

                  <div className="form-group">
                    <label htmlFor="toCity">–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</label>
                    <Field
                      type="text"
                      id="toCity"
                      name="toCity"
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞"
                    />
                    <ErrorMessage name="toCity" component="div" className="error" />
                  </div>

                  <div className="form-group">
                    <label htmlFor="weight">–í–µ—Å –≥—Ä—É–∑–∞ (–∫–≥)</label>
                    <Field
                      type="number"
                      id="weight"
                      name="weight"
                      placeholder="0.00"
                      min="0"
                      step="0.1"
                    />
                    <ErrorMessage name="weight" component="div" className="error" />
                  </div>

                  <div className="form-group">
                    <label htmlFor="volume">–û–±—ä–µ–º –≥—Ä—É–∑–∞ (–º¬≥)</label>
                    <Field
                      type="number"
                      id="volume"
                      name="volume"
                      placeholder="0.00"
                      min="0"
                      step="0.1"
                    />
                    <ErrorMessage name="volume" component="div" className="error" />
                  </div>

                  <div className="form-group full-width">
                    <label htmlFor="goodsType">–¢–∏–ø –≥—Ä—É–∑–∞</label>
                    <Field as="select" id="goodsType" name="goodsType">
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞</option>
                      {goodsTypes.map(type => (
                        <option key={type} value={type}>{type}</option>
                      ))}
                    </Field>
                    <ErrorMessage name="goodsType" component="div" className="error" />
                  </div>
                </div>

                <button type="submit" className="submit-button">
                  –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
                </button>
              </Form>
            )}
          </Formik>

          {showResult && (
            <div className="calculator-result">
              <h3>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</h3>
              <div className="price">{estimatedPrice.toLocaleString()} ‚ÇΩ</div>
              <p className="note">
                * –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–µ—Ç–∞–ª–µ–π –ø–µ—Ä–µ–≤–æ–∑–∫–∏
              </p>
              <button 
                className="request-button"
                onClick={() => document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' })}
              >
                –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
              </button>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};

export default Calculator; 